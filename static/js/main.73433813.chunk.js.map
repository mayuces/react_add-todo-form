{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","React","memo","todo","title","completed","classNames","TodoList","todos","map","usersTodoList","userId","users","find","App","useState","setTodos","setTitle","setUserId","setCompleted","titleError","userError","errors","setErrors","onSubmit","event","preventDefault","trim","length","error","Math","max","u","newTodo","action","method","htmlFor","type","placeholder","value","onChange","target","replace","disabled","checked","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.73433813.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { User } from '../../types/User';\n\ntype Props = {\n  user: User,\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { email, name } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoInfo: React.FC<Props> = React.memo(\n  ({ todo }) => {\n    const {\n      id,\n      title,\n      completed,\n      user,\n    } = todo;\n\n    return (\n      <article\n        data-id={id}\n        className={classNames(\n          'TodoInfo',\n          {\n            'TodoInfo--completed': completed,\n          },\n        )}\n      >\n        <h2 className=\"TodoInfo__title\">\n          {title}\n        </h2>\n\n        {user && <UserInfo user={user} />}\n      </article>\n    );\n  },\n);\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = React.memo(\n  ({ todos }) => {\n    return (\n      <section className=\"TodoList\">\n        {todos.map(todo => (\n          <TodoInfo todo={todo} key={todo.id} />\n        ))}\n      </section>\n    );\n  },\n);\n","import './App.scss';\nimport React, { useState } from 'react';\n\nimport users from './api/users';\nimport todosFromServer from './api/todos';\n\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList';\n\nconst usersTodoList: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: (users.find(user => user.id === todo.userId) || null),\n}));\n\nexport const App = () => {\n  const [todos, setTodos] = useState(usersTodoList);\n  const [title, setTitle] = useState('');\n  const [userId, setUserId] = useState(0);\n  const [completed, setCompleted] = useState(false);\n  const [errors, setErrors] = useState({\n    titleError: false,\n    userError: false,\n  });\n\n  const handleError = () => {\n    if (!title.trim().length) {\n      setErrors((error) => ({\n        ...error,\n        titleError: true,\n      }));\n    }\n\n    if (!userId) {\n      setErrors((error) => ({\n        ...error,\n        userError: true,\n      }));\n    }\n  };\n  //   event.preventDefault();\n\n  //   if (!title.trim().length) {\n  //     setErrors((current) => ({\n  //       ...current,\n  //       titleError: true,\n  //     }));\n  //   }\n\n  //   if (!userId) {\n  //     setErrors((current) => ({\n  //       ...current,\n  //       userError: true,\n  //     }));\n  //   }\n\n  //   if (!title.trim().length || !userId) {\n  //     return;\n  //   }\n\n  //   const newTodo: Todo = {\n  //     title,\n  //     userId,\n  //     completed,\n  //     id: (Math.max(...todos.map(todo => todo.id)) + 1),\n  //     user: users.find(user => user.id === userId) || null,\n  //   };\n\n  //   setTodos([...todos, newTodo]);\n  //   setTitle('');\n  //   setUserId(0);\n  //   setCompleted(false);\n  // };\n\n  const handleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value.replace(/[^A-Za-z-А-Яа-я-іІїЇєЄ\\s]/g, ''));\n    setErrors((error) => ({\n      ...error,\n      titleError: false,\n    }));\n  };\n\n  const handleSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+event.target.value);\n    setErrors((error) => ({\n      ...error,\n      userError: false,\n    }));\n  };\n\n  const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!title.trim().length || !userId) {\n      handleError();\n\n      return;\n    }\n\n    const id = Math.max(...todos.map(todo => todo.id)) + 1;\n    const user = users.find(u => u.id === userId) || null;\n\n    const newTodo = {\n      id,\n      title,\n      completed,\n      userId,\n      user,\n    };\n\n    setTodos([...todos, newTodo]);\n    setTitle('');\n    setUserId(0);\n    setCompleted(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={event => onSubmit(event)}\n      >\n        <div className=\"field\">\n          <label\n            className=\"label\"\n            htmlFor=\"titleInput\"\n          >\n            {'Title: '}\n          </label>\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={title}\n            onChange={handleInput}\n          />\n          {errors.titleError\n            && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <label\n            className=\"label\"\n            htmlFor=\"titleInput\"\n          >\n            {'User: '}\n          </label>\n          <select\n            data-cy=\"userSelect\"\n            value={userId}\n            onChange={handleSelect}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {users.map(user => (\n              <option value={user.id} key={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n          {errors.userError\n            && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"completed\" className=\"checkbox\">\n            {'Completed? '}\n            <input\n              id=\"completed\"\n              type=\"checkbox\"\n              name=\"completed\"\n              checked={completed}\n              onChange={() => setCompleted(!completed)}\n            />\n          </label>\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}